#yelp
import argparse
import json
import pprint
import sys
import urllib
import urllib2
import csv
import codecs
import time
import oauth2

#Opening the points file
pointFileLocation = ('/Users/abdullalshehhi/Desktop/Python_new_shit/census_tract_coordinates.csv')
with open(pointFileLocation, 'rb') as basePoints:
    reader = csv.reader(basePoints, delimiter = ',')
    pointsList = list(reader)

#Opening the output file
output = codecs.open('/Users/abdullalshehhi/Desktop/Python_new_shit/output.csv','wb', encoding='utf-8') # for tab delimited files, it's best to save your file as .txt 
output.write('Name,lat,lon,rating\n')

# Starting the loop (for every single line in the points file)
error = 0 # I'm setting up this variable to keep track of the number of errors

API_HOST = 'api.yelp.com'
DEFAULT_TERM = 'bars'
DEFAULT_LOCATION = 'New York City'
SEARCH_LIMIT = 20
SEARCH_PATH = '/v2/search/'
BUSINESS_PATH = '/v2/business/'

# OAuth credential placeholders that must be filled in by users.
CONSUMER_KEY = 'REDACTED'
CONSUMER_SECRET = 'REDACTED'
TOKEN = 'REDACTED'
TOKEN_SECRET = 'REDACTED'

lat=0
lon=0

for line in pointsList:
    lat = line[0]
    lon = line[1]
    print lat
    print lon
    print 'coords loaded'
    print ' '
    print 'QUERYING THE API......LIVING ON A PRAYER'
    try:
        DEFAULT_LL= str(lat)+','+str(lon)
        def request(host, path, url_params=None):
            """Prepares OAuth authentication and sends the request to the API.
            Args:
                host (str): The domain host of the API.
                path (str): The path of the API after the domain.
                url_params (dict): An optional set of query parameters in the request.
            Returns:
                dict: The JSON response from the request.
            Raises:
                urllib2.HTTPError: An error occurs from the HTTP request.
            """
            url_params = url_params or {}
            url = 'http://{0}{1}?'.format(host, urllib.quote(path.encode('utf8')))
        
            consumer = oauth2.Consumer(CONSUMER_KEY, CONSUMER_SECRET)
            oauth_request = oauth2.Request(method="GET", url=url, parameters=url_params)
        
            oauth_request.update(
                {
                    'oauth_nonce': oauth2.generate_nonce(),
                    'oauth_timestamp': oauth2.generate_timestamp(),
                    'oauth_token': TOKEN,
                    'oauth_consumer_key': CONSUMER_KEY
                }
            )
            token = oauth2.Token(TOKEN, TOKEN_SECRET)
            oauth_request.sign_request(oauth2.SignatureMethod_HMAC_SHA1(), consumer, token)
            signed_url = oauth_request.to_url()
            
            print u'Querying {0} ...'.format(url)
        
            conn = urllib2.urlopen(signed_url, None)
            try:
                response = json.loads(conn.read())
            finally:
                conn.close()
        
            return response
        
        def search(term, ll):
            """Query the Search API by a search term and location.
            Args:
                term (str): The search term passed to the API.
                location (str): The search location passed to the API.
            Returns:
                dict: The JSON response from the request.
            """
            
            url_params = {
                'term': term.replace(' ', '+'),
                'll': ll.replace(' ', '+'),
                'limit': SEARCH_LIMIT,
            }
            return request(API_HOST, SEARCH_PATH, url_params=url_params)
        
        def get_business(business_id):
            """Query the Business API by a business ID.
            Args:
                business_id (str): The ID of the business to query.
            Returns:
                dict: The JSON response from the request.
            """
            business_path = BUSINESS_PATH + business_id
        
            return request(API_HOST, business_path)
        
        def query_api(term, ll):
            """Queries the API by the input values from the user.
            Args:
                term (str): The search term to query.
                location (str): The location of the business to query.
            """
            response = search(term, ll)
        
            businesses = response.get('businesses')
        
            if not businesses:
                print u'No businesses for {0} in {1} found.'.format(term, ll)
                return
            for x in businesses:
                print ' '
                print 'PRINTING X................... '
                print x
                business_id = x['id']
                business_lat= x['location']['coordinate']['latitude']
                business_lon= x['location']['coordinate']['longitude']
                business_rating = x['rating']
                business_categories = x['gaybars']
                print ' '
                print x["name"]
                output.write(str(x["name"])+',')
                print business_lat
                output.write(str(business_lat)+',')
                print business_lon
                output.write(str(business_lon)+',')
                print business_rating
                output.write(str(business_rating)+'\n')
                print ' '
            
            print u'{0} businesses found, querying business info for the top result "{1}" ...'.format(
                len(businesses),
                business_id
            )
            
            response = get_business(business_id)
            
            print ' '
            print response
            print ' '
        
            print u'Result for business "{0}" found:'.format(business_id)
            pprint.pprint(response, indent=2)
        
        
        def main():
            parser = argparse.ArgumentParser()
        
            parser.add_argument('-q', '--term', dest='term', default=DEFAULT_TERM, type=str, help='Search term (default: %(default)s)')
            parser.add_argument('-l', '--ll', dest='ll', default=DEFAULT_LL, type=str, help='Search ll (default: %(default)s)')
        
            input_values = parser.parse_args()
            print 'printing input values'
            print input_values
            print ' '
        
            try:
                query_api(input_values.term, input_values.ll)
            except urllib2.HTTPError as error:
                sys.exit('Encountered HTTP error {0}. Abort program.'.format(error.code))
        
        
        if __name__ == '__main__':
            main()
    except UnicodeEncodeError as e:
        error+=1
        print e
    time.sleep(5)
output.close()
print ' '
print "done"
